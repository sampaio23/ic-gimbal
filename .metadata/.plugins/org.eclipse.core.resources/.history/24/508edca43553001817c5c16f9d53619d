/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.0   2018-05-02

The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"

/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/

void InitializeTimer(int period = 500){
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 400;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	timerInitStructure.TIM_Period = period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM4, &timerInitStructure);
	TIM_Cmd(TIM4, ENABLE);
}

void InitializePWMChannel(int brightness = 500){

	TIM_OCInitTypeDef outputChannelInit = {0,};
	outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
	outputChannelInit.TIM_Pulse = brightness;
	outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
	outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &outputChannelInit);
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);

	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);

}

void PonteHcontrol(){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_9 | GPIO_Pin_11;
	GPIO_Init(GPIOD, &GPIO_InitStructure);

	GPIO_ResetBits(GPIOD, GPIO_Pin_9);
	GPIO_SetBits(GPIOD, GPIO_Pin_11);
}


void InitializeLEDs(){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitTypeDef gpioStructure;
	gpioStructure.GPIO_Pin = GPIO_Pin_14;
	gpioStructure.GPIO_Mode = GPIO_Mode_AF;
	gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_Init(GPIOD, &gpioStructure);
}

uint8_t mySPI_GetData(uint8_t adress){

	GPIO_ResetBits(GPIOA, GPIO_Pin_15);

	adress = 0x80 | adress;

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)){}
		SPI_I2S_SendData(SPI1, adress);

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE)){}
		SPI_I2S_ReceiveData(SPI1); //Clear RXNE bit

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)){}
		SPI_I2S_SendData(SPI1, 0x00); //Dummy byte to generate clock

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE)){}

	GPIO_SetBits(GPIOA, GPIO_Pin_15);

	return  SPI_I2S_ReceiveData(SPI1);
}

void mySPI_SendData(uint8_t adress, uint8_t data){

	GPIO_ResetBits(GPIOA, GPIO_Pin_15);

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
	SPI_I2S_SendData(SPI1, adress);
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
	SPI_I2S_ReceiveData(SPI1);

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
	SPI_I2S_SendData(SPI1, data);
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
	SPI_I2S_ReceiveData(SPI1);

	GPIO_SetBits(GPIOA, GPIO_Pin_15);
}


void InitializeSPI(){

		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

		//GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);

		GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF;
		GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;
		GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;
		GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Pin=GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitTypeDef GPIO_InitStructureCS;
		GPIO_InitStructureCS.GPIO_Mode=GPIO_Mode_OUT;
		GPIO_InitStructureCS.GPIO_OType=GPIO_OType_PP;
		GPIO_InitStructureCS.GPIO_PuPd=GPIO_PuPd_UP;
		GPIO_InitStructureCS.GPIO_Speed=GPIO_Speed_50MHz;
		GPIO_InitStructureCS.GPIO_Pin=GPIO_Pin_15;
		GPIO_Init(GPIOA, &GPIO_InitStructureCS);

		GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1); //SCK
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1); //MISO
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1); //MOSI

		SPI_InitTypeDef spiInitStructure;

		SPI_StructInit(&spiInitStructure);
		spiInitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
		spiInitStructure.SPI_Mode = SPI_Mode_Master;
		spiInitStructure.SPI_DataSize = SPI_DataSize_8b;
		spiInitStructure.SPI_CPOL = SPI_CPOL_Low;
		spiInitStructure.SPI_CPHA = SPI_CPHA_1Edge;
		spiInitStructure.SPI_NSS = SPI_NSS_Soft;
		spiInitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
		spiInitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
		//spiInitStructure.SPI_CRCPolynomial =

		SPI_Init(SPI1, &spiInitStructure);
			//USART_Init(USART2, &USART_InitStructure);
		GPIO_SetBits(GPIOA, GPIO_Pin_15);
		SPI_Cmd(SPI1, ENABLE);
			//USART_Cmd(USART2, ENABLE);
			//USART_ReceiveData(USART2);

}

#define ACCEL_MAX 32766

int main(void)
{
	InitializeLEDs();
	InitializeTimer();
	InitializePWMChannel(0);
	InitializeSPI();
	uint8_t WHO_AM_I = 0x00;
	uint16_t ACCEL_Z = 0x00;
	uint8_t ACCEL_ZOUT_H;
	uint8_t ACCEL_ZOUT_L;
	uint8_t ACCEL_CONFIG;
	float gravity = 0;

	WHO_AM_I = mySPI_GetData(0x75);
	WHO_AM_I++;



	int j;

	while(1){

		ACCEL_ZOUT_H = mySPI_GetData(0x3F);
		ACCEL_ZOUT_L = mySPI_GetData(0x40);
		ACCEL_CONFIG = mySPI_GetData(0x1C);
		ACCEL_Z = (ACCEL_ZOUT_H << 8) | (ACCEL_ZOUT_L & 0xFF);

		gravity = ((float)((int)ACCEL_Z))/((int)ACCEL_MAX)*2*9.81;

		InitializePWMChannel(100);

	}
	return 0;

}


/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  /* TODO, implement your code here */
  return;
}

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  /* TODO, implement your code here */
  return -1;
}
